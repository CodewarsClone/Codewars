INSERT INTO katas (kyu, name, tags, languages, starter_code, description, examples, test_script)
VALUES (8, 'Generate range of integers', '["ALGORITHMS"]', '["Javascript","C#","Elixir"]', 'function generateRange(min, max, step){}', 'Implement a function named generateRange(min, max, step), which takes three arguments and generates a range of integers from min to max, with the step. The first integer is the minimum value, the second is the maximum of the range and the third is the step. (min < max)', '[{"test":"Test.assertSimilar(generateRange(2, 10, 2), [2,4,6,8,10]);","result":""}]','[{"test":"Test.assertSimilar(generateRange(2, 10, 2), [2,4,6,8,10]);","result":""},{"test":"Test.assertSimilar(generateRange(1, 10, 3), [1,4,7,10]);","result":""},{"test":"var generateRandom = function(min, max){ return Math.floor(Math.random() * max) + min; }; var range = function(min, max, step){ var z = []; for(var i = min; i <= max; i += step){ z.push(i); } return z; }; for(var i = 0; i < 10; i++){ var randomMax = generateRandom(30, 100), randomMin = generateRandom(1, 20), randomStep = generateRandom(1, 10); Test.assertSimilar(generateRange(randomMin, randomMax, randomStep), range(randomMin, randomMax, randomStep)); }","result":""}]'),

(7, 'Descending Order', '["FUNDAMENTALS","FUNCTIONS","CONTROL FLOW","BASIC LANGUAGE FEATURES"]', '["Javascript","C#","Haskell","Java","Clojure","Python","Ruby","Rust","Swift"]', 'function descendingOrder(n){}', 'Descending Order', '[{"test":"Test.assertEquals(descendingOrder(15), 51)","result":""}]', '[{"test":"Test.assertEquals(descendingOrder(0), 0)","result":""},{"test":"Test.assertEquals(descendingOrder(1), 1)","result":""},{"test":"Test.assertEquals(descendingOrder(111), 111)","result":""},{"test":"Test.assertEquals(descendingOrder(15), 51)","result":""},{"test":"Test.assertEquals(descendingOrder(1021), 2110)","result":""},{"test":"Test.assertEquals(descendingOrder(123456789), 987654321)","result":""}]'),

(7, 'Disemvowel Trolls', '["FUNDAMENTALS","STRINGS","REGULAR EXPRESSIONS","DECLARATIVE PROGRAMMING","ADVANCED LANGUAGE FEATURES"]', '["Javascript","C#","Clojure","CoffeeScript","F#","Haskell","Python","Ruby"]', 'function disemvowel(str) {}', 'Your task is to write a function that takes a string and return a new string with all vowels removed.',  '[{"test":"Test.assertEquals(disemvowel(''This website is for losers LOL!''), ''Ths wbst s fr lsrs LL!'');","result":""}]', '[{"test":"Test.assertEquals(disemvowel(''This website is for losers LOL!''), ''Ths wbst s fr lsrs LL!'') Test.assertEquals(disemvowel(''No offense but,Your writing is among the worst I''ve ever read''), ''N ffns bt,Yr wrtng s mng th wrst ''v vr rd'') Test.assertEquals(disemvowel(''What are you, a communist?''), ''Wht r y, cmmnst?'')","result":""}]'),

(6, 'Take a Ten Minute Walk', '["FUNDAMENTALS","ARRAYS"]', '["Javascript","Java","Haskell","F#","Python","Ruby"]', 'function isValidWalk(walk) {}', 'You live in the city of Cartesia where all roads are laid out in a perfect grid. You arrived ten minutes too early to an appointment, so you decided to take the opportunity to go for a short walk. The city provides its citizens with a Walk Generating App on their phones -- everytime you press the button it sends you an array of one-letter strings representing directions to walk (eg. [''n'', ''s'', ''w'', ''e'']). You know it takes you one minute to traverse one city block, so create a function that will return true if the walk the app gives you will take you exactly ten minutes (you don''t want to be early or late!) and will, of course, return you to your starting point. Return false otherwise.', '[{"test":"Test.expect(isValidWalk([''e'',''w'',''e'',''w'',''n'',''s'',''n'',''s'',''e'',''w'']));"},{"test":"Test.expect(isValidWalk([''n'',''s'',''e'',''w'',''n'',''s'',''e'',''w'',''n'',''s'']));"}]', '[{"test":"Test.expect(!isValidWalk([''n'']));"},{"test":"Test.expect(!isValidWalk([''n'',''s'']));"},{"test":"Test.expect(!isValidWalk([''n'',''s'',''n'',''s'',''n'',''s'',''n'',''s'',''n'',''s'',''n'',''s'']));"},{"test":"Test.expect(!isValidWalk([''n'',''s'',''e'',''w'',''n'',''s'',''e'',''w'',''n'',''s'',''e'',''w'',''n'',''s'',''e'',''w'']));"},{"test":"Test.expect(!isValidWalk([''n'',''s'',''n'',''s'',''n'',''s'',''n'',''s'',''n'',''n'']));"},{"test":"Test.expect(!isValidWalk([''e'',''e'',''e'',''w'',''n'',''s'',''n'',''s'',''e'',''w'']));"},{"test":"Test.expect(isValidWalk([''n'',''s'',''n'',''s'',''n'',''s'',''n'',''s'',''n'',''s'']));"},{"test":"Test.expect(isValidWalk([''e'',''w'',''e'',''w'',''n'',''s'',''n'',''s'',''e'',''w'']));"},{"test":"Test.expect(isValidWalk([''n'',''s'',''e'',''w'',''n'',''s'',''e'',''w'',''n'',''s'']));"}]'),

(6, 'Multiples of 3 and 5', '["ALGORITHMS","MATHEMATICS","NUMBERS"]', '["Javascript","Clojure","CoffeeScript","C++","C#","Elixir","Haskell","Java","PHP","Python","Ruby","TypeScript"]', 'function solution(number){}', 'description', '[{"test":"Test.expect(solution(10) == 23)"}]', '[{"test":"Test.expect(solution(10) == 23)"},{"test":"Test.expect(solution(20) == 78)"},{"test":"Test.expect(solution(200) == 9168)"}]'),

(7, 'Bubblesort Once', '["ALGORITHMS","MATHEMATICS","NUMBERS"]', '["Javascript","C++","C#","PHP"]', 'function bubblesortOnce(arr) {}', 'description', '[{"test":"Test.assertSimilar(bubblesortOnce([9,7,5,3,1,2,4,6,8]),[7,5,3,1,2,4,6,8,9]);"}]', '[{"test":"Test.assertSimilar(bubblesortOnce([9,7,5,3,1,2,4,6,8]),[7,5,3,1,2,4,6,8,9]);"},{"test":"Test.assertSimilar(bubblesortOnce([1,2]),[1,2]);"},{"test":"Test.assertSimilar(bubblesortOnce([2,1]),[1,2]);"},{"test":"Test.assertSimilar(bubblesortOnce([1,3]),[1,3]);"},{"test":"Test.assertSimilar(bubblesortOnce([3,1]),[1,3]);"},{"test":"Test.assertSimilar(bubblesortOnce([24,57]),[24,57]);"},{"test":"Test.assertSimilar(bubblesortOnce([89,36]),[36,89]);"},{"test":"Test.assertSimilar(bubblesortOnce([1,2,3]),[1,2,3]);"},{"test":"Test.assertSimilar(bubblesortOnce([2,4,1]),[2,1,4]);"},{"test":"Test.assertSimilar(bubblesortOnce([17,5,11]),[5,11,17]);"},{"test":"Test.assertSimilar(bubblesortOnce([25,16,9]),[16,9,25]);"},{"test":"Test.assertSimilar(bubblesortOnce([103,87,113]),[87,103,113]);"},{"test":"Test.assertSimilar(bubblesortOnce([1032,3192,2864]),[1032,2864,3192]);"},{"test":"Test.assertSimilar(bubblesortOnce([1,2,3,4]),[1,2,3,4]);"},{"test":"Test.assertSimilar(bubblesortOnce([2,3,4,1]),[2,3,1,4]);"},{"test":"Test.assertSimilar(bubblesortOnce([3,4,1,2]),[3,1,2,4]);"},{"test":"Test.assertSimilar(bubblesortOnce([4,1,2,3]),[1,2,3,4]);"},{"test":"Test.assertSimilar(bubblesortOnce([7,5,3,1]),[5,3,1,7]);"},{"test":"Test.assertSimilar(bubblesortOnce([5,3,7,7]),[3,5,7,7]);"},{"test":"Test.assertSimilar(bubblesortOnce([3,1,8,5]),[1,3,5,8]);"},{"test":"Test.assertSimilar(bubblesortOnce([1,9,5,5]),[1,5,5,9]);"},{"test":"Test.assertSimilar(bubblesortOnce([6,3,4,9,1,2,7,8,5]),[3,4,6,1,2,7,8,5,9]);"},{"test":"Test.assertSimilar(bubblesortOnce([6,3,4,15,14,9,1,2,7,8,5,14,11,15,17,19]),[3,4,6,14,9,1,2,7,8,5,14,11,15,15,17,19]);"}]')
;
